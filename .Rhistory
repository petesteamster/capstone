convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return tD#
}
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,30),data=t_data)#
tS=summary(tLM)
tS
tSrt$x
tSrt$x[2000:3000]
tSrt$ix[3000]
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[16423]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,30),data=t_data)#
tS=summary(tLM)
tS
convert_counts(t_data[,5],25)
convert_counts(t_data[,5],5)
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
tS=summary(tLM)
tS
hist(convert_counts(t_data[,5],5))
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3),convert_counts(t_data$x5,5))
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),convert_counts(t_data$x5,5))
tD[,5]
dim(tD)
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))
tD[,5]
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(3,4),.2)
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
skew_right=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}#
ampute_data<-function(tData,tCols,tProb)#
{#
	 tLen=length(tData[,1])#
	 tAmpData=tData#
	 tCount=round(tLen*tProb)#
	 for(i in tCols)#
	 {#
	 	 t_rows_set_null=sample(c(1:tLen),tCount, replace = FALSE)#
	 	 tAmpData[t_rows_set_null,i]<- NA #
	 }#
	 tR=list()#
	 tR[[1]]=tAmpData#
	 tR[[2]]=tData#
	 names(tR)=c("amp","data")#
	 return (tR)#
}
amp_dt=ampute_data(tD,c(3,4),.2)
amp_dt[,3]
amp_dt$amp[,3]
amp_dt=ampute_data(tD,c(3,4),.2)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)
library(MASS)#
require(MASS)#
library(mice)
amp_dt=ampute_data(tD,c(3,4),.2)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)
names(train)
names(train)=c('x1','x2','x3','x4','x5')
names(train)
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[16423]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.5)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
tSrt[1:10]
tSrt$ix[1:10]
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[6077]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.5)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[6077]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.7)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
tSrt$ix[1:10]
tSrt$x[1:10]
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.7)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
library(MASS)#
require(MASS)#
library(mice)#
#
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
skew_right=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}#
ampute_data<-function(tData,tCols,tProb)#
{#
	 tLen=length(tData[,1])#
	 tAmpData=tData#
	 tCount=round(tLen*tProb)#
	 for(i in tCols)#
	 {#
	 	 t_rows_set_null=sample(c(1:tLen),tCount, replace = FALSE)#
	 	 tAmpData[t_rows_set_null,i]<- NA #
	 }#
	 tR=list()#
	 tR[[1]]=tAmpData#
	 tR[[2]]=tData#
	 names(tR)=c("amp","data")#
	 return (tR)#
}#
#
d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#cor(d) #
tLM=lm(x1~x2+x3+x4+x5,data=d)#
tS=summary(tLM)#
tN=names(tS)#
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
for(i in 1:2000)#
{#
	d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#
    tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
}#
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[3657]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
library(MASS)#
require(MASS)#
library(mice)#
#
skew_left=function(t_data,tConstant)#
{#
	tD=tanh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
skew_right=function(t_data,tConstant)#
{#
	tD=sinh(t_data/max(abs(t_data))+tConstant)#
	return (tD)#
}#
convert_counts=function(t_data,t_factor)#
{#
	tD=t_data/max(abs(t_data))#
	tD=tD+2#
	tD=tD*t_factor#
	tD=round(tD)#
	return (tD)#
}#
ampute_data<-function(tData,tCols,tProb)#
{#
	 tLen=length(tData[,1])#
	 tAmpData=tData#
	 tCount=round(tLen*tProb)#
	 for(i in tCols)#
	 {#
	 	 t_rows_set_null=sample(c(1:tLen),tCount, replace = FALSE)#
	 	 tAmpData[t_rows_set_null,i]<- NA #
	 }#
	 tR=list()#
	 tR[[1]]=tAmpData#
	 tR[[2]]=tData#
	 names(tR)=c("amp","data")#
	 return (tR)#
}#
#
d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#cor(d) #
tLM=lm(x1~x2+x3+x4+x5,data=d)#
tS=summary(tLM)#
tN=names(tS)#
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
for(i in 1:2000)#
{#
	d <- data.frame(x1=rnorm(10),#
                 x2=rnorm(10),#
                 x3=rnorm(10),#
                 x4=rnorm(10),#
                 x5=rnorm(10))#
#
    tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
}#
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix[1]#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,5),data=t_data)#
summary(tLM)
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)
is.na(amp_dt$amp)
t_na_indexes=which(is.na(amp_dt$amp))
t_na_indexes
hist(tD$x3[t_na_indexes])
tD$x3[t_na_indexes]
tD$x3[1]
tD$x3[2]
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,5))#
names(tD)=c('x1','x2','x3','x4','x5')#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)#
t_na_indexes=which(is.na(amp_dt$amp))#
hist(tD$x3[t_na_indexes])
tD$x3[t_na_indexes]
names(train)
hist(train$x3[t_na_indexes])
train$x3[t_na_indexes]
train
train$x3
train$x3[1]
train$x3[2]
is.na(train)
is.na(train$x3)
sum(is.na(train$x3))
dim(am-_dt)
dim(am-_dt$amp)
dim(amp_dt$amp)
t_na_indexes
t_na_indexes=which(is.na(amp_dt$amp$x3))#
hist(train$x3[t_na_indexes])
par(mfrow=c(2,2))#
hist(train$x3[t_na_indexes])#
hist(tD$x3)
t_na_indexes=which(is.na(amp_dt$amp$x4))#
par(mfrow=c(2,2))#
hist(train$x4[t_na_indexes])#
hist(tD$x4)
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix[1]#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,1)+x3+skew_left(x4,2)+convert_counts(x5,20),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,1),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,20))#
names(tD)=c('x1','x2','x3','x4','x5')#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)#
t_na_indexes=which(is.na(amp_dt$amp$x4))#
par(mfrow=c(2,2))#
hist(train$x4[t_na_indexes])#
hist(tD$x4)
par(mfrow=c(2,2))#
hist(train$x2[t_na_indexes])#
hist(tD$x2)
tSrt=sort(tListRsq,index.return=TRUE,decreasing=T)#
tIndex=tSrt$ix[1]#
t_m=mvrnorm(n = 1000,c(0,0,0,0,0), tListCorr[[tIndex]])#
t_data=data.frame(t_m)#
tLM=lm(x1~skew_right(x2,3)+x3+skew_left(x4,2)+convert_counts(x5,20),data=t_data)#
summary(tLM)#
tD=data.frame(t_data$x1,skew_right(t_data$x2,3),skew_left(t_data$x3,2),t_data$x4,convert_counts(t_data$x5,20))#
names(tD)=c('x1','x2','x3','x4','x5')#
amp_dt=ampute_data(tD,c(2,3,4),.3)#
mi <- mice(amp_dt$amp)#
train <- complete(mi)#
names(train)=c('x1','x2','x3','x4','x5')#
tLM=lm(x1~x2+x3+x4+x5,data=train)#
summary(tLM)#
t_na_indexes=which(is.na(amp_dt$amp$x4))#
par(mfrow=c(2,2))#
hist(train$x2[t_na_indexes])#
hist(tD$x2)
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
library(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
rockLabel
tVRock
tSinatraLabel
sinatraLabel
tVSinatra
tFRF
music.pred
38+47
tOut
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
library(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
pca1<-prcomp(tData[,1:35976])
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
library(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
require(stats)
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tListCorrect
length(tListCorrect))
length(tListCorrect)
length(tListInCorrect)
tListInCorrect
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
pca<-cbind(pca1$x[,1:6],tNN);#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:10],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:10];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
tListCorrect
tListInCorrect
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#pca2<-prcomp(tData[,35977:71952])#
#pca<-cbind(pca1$x[,1:6],pca2$x[,1:2])#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:10];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:10],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:10]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
tListInCorrect
sum(tListInCorrect)
tListCorrect
sum(tListCorrect)
133/(133+867)
randomizeWave<-function(tW,tElements)#
{#
	   #tW<-noSilence(tW); #
	   tLength<-floor(length(tW@left)/tW@samp.rate);#
	   tMult<-floor(tLength/tElements);#
	   tSample<-(1:tElements)*tMult;#
	   #tSample<-c(c(1),tSample);#
	   tSample[tElements]<-tSample[tElements]-1;#
	   #tSample<-sample(1:tLength,tElements,replace=F);#
	   tFrom<-tSample[1];#
	   tTo<-tFrom+1;#
	   p1<-extractWave(tW,from=15,to=30,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       return (p1);#
}#
# randomizeWave<-function(tW,tElements)#
# {#
	   # tW<-noSilence(tW); #
	   # tLength<-floor(length(tW@left)/tW@samp.rate)-1;#
	   # tSample<-sample(1:tLength,tElements,replace=F);#
	   # tFrom<-tSample[1];#
	   # tTo<-tFrom+1;#
	   # p1<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   # for(i in 2:tElements)#
	   # {#
	   	    # tFrom<-tSample[i];#
	   	    # tTo<-tFrom+1;#
	   	    # ttmp<-extractWave(tW,from=tFrom,to=tTo,xunit='time');#
	   	    # p1<-bind(p1,ttmp);#
	   # }#
       # return (p1);#
# }#
getQuantileDistances<-function(tData,tRow,lwr,upr)#
{#
	  #tUniqueClasses<-unique(tClasses);#
	  tmpLwr<-lwr[which(lwr!=tRow)];#
	  tmpUpr<-upr[which(upr!=tRow)];#
	  tD<-dist(tData);#
	  tM<-as.matrix(tD);#
	  tM2<-(tM[tRow,]);#
	  q1<-quantile(tM2[tmpLwr],prob=seq(0,1,.05));#
	  q2<-quantile(tM2[tmpUpr],prob=seq(0,1,.05));#
	  tList<-list();#
	  tList[[1]]<-q1;#
	  tList[[2]]<-q2;#
	  return (tList);#
}#
getSongDistance<-function(tData,tL)#
{#
	   tD<-dist(tData);#
	   tM<-as.matrix(tD);#
	   tLength<-length(tM[1,]);#
	   tV<-vector();#
	   #tMtrx<-matrix(0,tLength,tL);#
	   for(i in 1:tLength)#
	   {#
	   	    tMP<-sort(tM[i,-i],index.return=T);#
	   	    #(!!floor(tNN[20,]/40))+0#
	   	    tS<-(!!floor(tMP$ix/40))+0;#
	   	    tS<-sum(tS[1:tL]);#
	   	    if(tS>2)#
	   	    {#
	   	    	  tS<-1;#
	   	    }#
	   	    else#
	   	    {#
	   	    	 tS<-0;#
	   	    }#
	   	    tV[i]<-tS;#
	   }#
	   #tL<-tM[s1,];#
	   #tS<-sort(tL,index.return=T);#
	   return (tV);#
}#
getHistBreaks<-function(tData)#
{#
	   tMin<-0;#
	   tMNtemp<-0;#
	   tMax<-0;#
	   tMXtemp<-0;#
	   tLength<-length(tData[,1]);#
	   for(i in 1:tLength)#
	   {#
	   	     tH<-hist(tData[i,],plot=F);#
	   	     tMNtemp<-tH$breaks[1];#
	   	     tMXtemp<-max(tH$breaks);#
	   	     if(tMin>tMNtemp)#
	   	     {#
	   	     	   tMin=tMNtemp;#
	   	     }#
	   	     if(tMax<tMXtemp)#
	   	     {#
	   	     	   tMax=tMXtemp;#
	   	     }#
	   }#
	   #tMin<-tMin-100;#
	   #tMax<-tMax+100;#
	   tSQ<-seq(tMin,tMax,length=50)#
	   return (tSQ);#
}#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"#
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
#
#####
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();#
for(i in 1:length(tVRock))#
{#
	   tFilename<-tVRock[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tW<-downsample(tW,tSample)#
	   #tRockLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"),center=F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       #show(tW)#
       m1 <- melfcc(df)#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;     #
   tRockMtrx[i,]<-v1;    #
}#
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:6];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/Rock.txt"#
tVRock<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/"#
for(i in 1:tLength)#
{#
	 tVRock[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}#
require(stats)#
require(tuneR)#
require(randomForest)#
tN<-"/users/peterstafford/convolutionaNeuralNetworks/music/sinatra.txt"#
tVSinatra<-vector();#
df <- read.csv(tN, header=F)#
tLength<-dim(df)[1]#
tR<-"/users/peterstafford/convolutionaNeuralNetworks/music/genre02/sinatra/"
for(i in 1:tLength)#
{#
	 tVSinatra[i]<-paste(tR,as.vector(df[i,]),sep="");	#
}
numOfSec<-30;#
#tSample<-20000;#
tSample<-20000;#
tFrom<-round(1323000);#
tTo<-round(2646000);#
tFilename<-tVRock[1];#
tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
#tW<-readWave(tFilename, header = FALSE, toWaveMC = NULL)#
#tW<-randomizeWave(tW,numOfSec);#
 #show(tW)#
 df<-mono(tW, which = c("left"))#
 m1 <- melfcc(df)#
 tMtrxCols<-(dim(m1)[1]*dim(m1)[2]*2); #
#
tRockMtrx<-matrix(0,length(tVRock),tMtrxCols);#
tRockLength<-vector();
tSinatraMtrx<-matrix(0,length(tVSinatra),tMtrxCols);#
tSinatraLength<-vector();#
for(i in 1:length(tVSinatra))#
{#
	   tFilename<-tVSinatra[i];#
	   #tW<-readWave(tFilename,header = FALSE, toWaveMC = NULL)#
	   #tW<-randomizeWave(tW,numOfSec);#
	   #tSinatraLength[i]<-length(tW@left)/tW@samp.rate;#
	   tW<-readWave(tFilename, from = tFrom, to = tTo, header = FALSE, toWaveMC = NULL)#
	   tW<-downsample(tW,tSample);#
	   #tW<-normalize(tW, unit = c("16"), center = F,  rescale = TRUE)#
	   tChannel='both';#
	   if(length(tW@right)==0)#
	   {#
	   	   tChannel='left';#
	   }#
       #show(tW)#
       df<-mono(tW, which = c(tChannel))#
       m1 <- melfcc(df)#
       #v1 <- as.vector(matrix(m1, 1,tMtrxCols))#
       dta1<-deltas(m1);#
       v1 <- as.vector(matrix(m1, 1,tMtrxCols/2))#
       v2 <- as.vector(matrix(dta1,1,tMtrxCols/2));#
       v1<-c(v1,v2);#
   tNA<-which(is.na(v1))#
       v1[tNA]=0;           #
   tSinatraMtrx[i,]<-v1;    #
}#
rockLabel<-rep(1,length(tVRock))#
#tRockMtrx<-cbind(rockLabel,tRockMtrx)#
sinatraLabel<-rep(2,length(tVSinatra))#
tResponses<-c(rockLabel,sinatraLabel);#
#tSinatraMtrx<-cbind(sinatraLabel,tSinatraMtrx)#
tData<-rbind(tRockMtrx,tSinatraMtrx)#
library(randomForest)#
pca1<-prcomp(tData[,1:35976])#
#
tNN<-getSongDistance(pca1$x,5);#
#pca<-cbind(pca1$x[,1:10],tNN);#
pca<-pca1$x[,1:6];#
#tResponses<-c(1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,3,3,3,3,3,3,3,3,3);#
tFactor<-factor(tResponses)#
tCount<-0;#
tListCorrect<-vector(mode='numeric',length=84);#
tListInCorrect<-vector(mode='numeric',length=84);#
tIndex<-1;#
for(i in 1:1000)#
{#
	tOut<-sample(1:84,1);#
	tPCA<-pca[-tOut,]#
	tPCAFactor<-tFactor[-tOut];#
    tFRF<-randomForest(tPCA[,1:6],ntree=1001,tPCAFactor,importance=T)#
    #tFRF<-randomForest(tData,ntree=1001,tFactor,importance=T)#
    #tFRF#
    music.pred <- predict(tFRF, pca[tOut,1:6]);#
    if(music.pred==tFactor[tOut])#
    {#
    	  tCount<-tCount+1;#
    	  tListCorrect[tOut]<-tListCorrect[tOut]+1;#
    }#
    else#
    {#
    	   tListInCorrect[tOut]<-tListInCorrect[tOut]+1;#
    	  # tmp<-vector();#
    	  # tmp[1]<-tOut;#
    	  # tmp[2]<-music.pred;#
    	  # tList[tIndex]<-tOut;#
    	  # tIndex<-tIndex+1; #
    }#
}
tFRF
39=44
39+44
dim(pca)
print('tt')
tryCatch({#
	  3/0#
}, error=function(error_condition)#
   {#
   	   print('error')#
   })
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   })
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   }#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   }#
   )
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   }#
   )
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally={'ok'})
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  #cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally={'ok'})
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  #cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally={print('ok')})
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally={print('ok')})
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally=function{print('ok')})
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally=function(){print('ok')})
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  #cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally=function(){print('ok')})
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally=function()#
   {#
   	   print('ok')#
   })
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  #cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })
error_flag=0#
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  #cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   error_flag=1#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   error_flag=1#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })#
   print(error_flag)
error_flag=0#
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   error_flag=1#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   error_flag=1#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })#
   print(error_flag)
error_flag=0#
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })#
   print(error_flag)
error_flag=0#
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  #cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })#
   print(error_flag)
error_flag=0#
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })#
   print(error_flag)
error_flag=0#
tryCatch({#
	  df1=c(1,2,3,4)#
	  df2=c(1,2,3,4,5)#
	  #cbind(df1,df2)#
}, error=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('error')#
   },#
   warning=function(error_condition)#
   {#
   	   error_flag<<-1#
   	   print('warning')#
   },#
   finally=function(error_condition)#
   {#
   	   print('ok')#
   })#
   print(error_flag)
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	d <- data.frame(x1=rnorm(10),#
                   x2=rnorm(10),#
                   x3=rnorm(10),#
                   x4=rnorm(10),#
                   x5=rnorm(10),#
                   x6=rnorm(10),#
                   x7=rnorm(10),#
                   x8=rnorm(10))#
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(x1~x2+x3+x4+x5+x6+x7+x8,data=d)#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	d <- data.frame(x1=rnorm(20),#
                   x2=rnorm(20),#
                   x3=rnorm(20),#
                   x4=rnorm(20),#
                   x5=rnorm(20),#
                   x6=rnorm(20),#
                   x7=rnorm(20),#
                   x8=rnorm(20))#
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(x1~x2+x3+x4+x5+x6+x7+x8,data=d)#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	d <- data.frame(x1=rnorm(tRows),#
                   x2=rnorm(tRows),#
                   x3=rnorm(tRows),#
                   x4=rnorm(tRows),#
                   x5=rnorm(tRows),#
                   x6=rnorm(tRows),#
                   x7=rnorm(tRows),#
                   x8=rnorm(tRows))#
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(x1~x2+x3+x4+x5+x6+x7+x8,data=d)#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8])#
    tS=summary(tLM)#
    tListRsq[i]=tS$r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
names(tLM)
summart(tLM)
summary(tLM)
tLM$model
names(tLM$model)
names(tLM)
names(tLM$coefficients)
tS
names(tS)
tS$fstatistic
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8])#
    tS=summary(tLM)#
    tListRsq[i]=tS$adj.r.squared#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8])#
    tS=summary(tLM)#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tS
names(tS)
dim(d)
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+,d[,10])#
    tS=summary(tLM)#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tListRsq=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tS
pf(3.185, 9, 5, lower.tail=F)
names(tS)
tS$fstatistic
tS$fstatistic$value
tS$fstatistic
tS$fstatistic[1]
tS$fstatistic[2]
tS$fstatistic[3]
as.numeric(tS$fstatistic[3])
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    pVal=pf(tF,deg1,deg2)#
    tListPval[i]=pVal#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
sort(tListRsq[tI])
tListPval
sort(tListPval)
sort(tListRsq[tI],return.index=TRUE)
sort(tListRsq[tI],index.return=TRUE)
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    pVal=pf(tF,deg1,deg2)#
    tListPval[i]=pVal#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
tSrt=sort(tListRsq[tI],index.return=TRUE)#
tListPval[tSrt.ix]
tListPval[tSrt$ix]
tS
tSrt$x
help(summary$lm)
help(summary.lm)
tListSummary=list()#
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tListSummary[[i]]=tS#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    pVal=pf(tF,deg1,deg2)#
    tListPval[i]=pVal#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
tSrt=sort(tListRsq[tI],index.return=TRUE)
warnings()
pVal
pf(tF,deg1,deg2)
tF
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=15#
tCols=10#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tListSummary[[i]]=tS#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    pVal=pf(tF,deg1,deg2,lower.tail=F)#
    tListPval[i]=pVal#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
tSrt=sort(tListRsq[tI],index.return=TRUE)#
tListPval[tSrt$ix]
tSrt$x
tListPval[tSrt$ix]
tSrt$x
tListPval[tSrt$ix]
tSrt$ix
tListSummary[42]
tListSummary[[42]]
tListSummary[[599]]
tListSummary[[514]]
tSrt$ix
tListSummary[[397]]
tSrt$ix
tListSummary[[301]]
tSrt$ix
tListSummary[[155]]
tListSummary[[283]]
tListSummary=list()#
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=20#
tCols=15#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tListSummary[[i]]=tS#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    pVal=pf(tF,deg1,deg2,lower.tail=F)#
    tListPval[i]=pVal#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
tSrt=sort(tListRsq[tI],index.return=TRUE)
warnings()
pVal
pVal=pf(tF,deg1,deg2,lower.tail=F)
pVal
deg1
deg2
tListSummary=list()#
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=20#
tCols=15#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tListSummary[[i]]=tS#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    #pVal=pf(tF,deg1,deg2,lower.tail=F)#
    tListPval[i]=0#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
tSrt=sort(tListRsq[tI],index.return=TRUE)
tSrt$x
tSrt$ix
tListSummary[[726]]
pf(tF,9,10,lower.tail=F)
pf(tF,9,10,lower.tail=F)[1]
1-pf(tF,9,10,lower.tail=F)[1]
1-pf(8.69,9,10,lower.tail=F)[1]
pf(8.69,9,10,lower.tail=F)[1]
tS=summary(tLM)#
tN=names(tS)#
tListSummary=list()#
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=20#
tCols=15#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:1000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tListSummary[[i]]=tS#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    pVal=pf(tF,deg1,deg2,lower.tail=F)[1]#
    tListPval[i]=pVal#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
tSrt=sort(tListRsq[tI],index.return=TRUE)
tSrt
tListPval[tSrt$ix]
round(tListPval[tSrt$ix]*10000)/10000
round(tListPval[tSrt$ix]*1000000)/1000000
tS=summary(tLM)#
tN=names(tS)#
tListSummary=list()#
tListRsq=vector()#
tListPval=vector()#
tListData=list()#
tListCorr=list()#
tRows=20#
tCols=15#
tM=matrix(0,tRows,tCols)#
tListPosDef=vector()#
for(i in 1:10000)#
{#
	# d <- data.frame(x1=rnorm(tRows),#
                   # x2=rnorm(tRows),#
                   # x3=rnorm(tRows),#
                   # x4=rnorm(tRows),#
                   # x5=rnorm(tRows),#
                   # x6=rnorm(tRows),#
                   # x7=rnorm(tRows),#
                   # x8=rnorm(tRows))#
    for(k in 1:tCols)#
    {#
    	tM[,k]=rnorm(tRows)#
    }#
    d<-data.frame(tM)                #
	#tLM=lm(x1~x2+x3+x4+x5,data=d)#
    tLM=lm(d[,1]~d[,2]+d[,3]+d[,4]+d[,5]+d[,6]+d[,7]+d[,8]+d[,9]+d[,10])#
    tS=summary(tLM)#
    tListSummary[[i]]=tS#
    tF=tS$fstatistic#
    tFS=as.numeric(tF[1])#
    deg1=as.numeric(tF[2])#
    deg2=as.numeric(tF[3])#
    pVal=pf(tF,deg1,deg2,lower.tail=F)[1]#
    tListPval[i]=pVal#
    tListRsq[i]=round(tS$adj.r.squared*100)/100#
    tListData[[i]]=d#
    tListCorr[[i]]=cor(d)#
    tL=length(eigen(tListCorr[[i]])$values)#
    tE=eigen(tListCorr[[i]])$values#
    #tSigns=sign(tE)#
    #tE=round(1000000*tE)/1000000#
    #tE=tE*tSigns#
    tL=length(tE)#
    tE=sum(sign(tE))#
    tListPosDef[i]=(tL==tE)#
}#
tI=which(tListPosDef==TRUE)#
tSrt=sort(tListRsq[tI],index.return=TRUE)#
round(tListPval[tSrt$ix]*1000000)/1000000
tSrt$x
round(tListPval[tSrt$ix]*1000000)/1000000
mse(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
mse(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])
MSE(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
MSE(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])
require(saeRobust)
MSE(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
MSE(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])
mse(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
mse(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])
require(saeRobust)#
setwd('/Users/peterstafford/generalassembly/capstone_repo/capstone/capstone/capstone')#
t_amp=read.csv('amp_data.csv')#
t_py=read.csv('train_Python_.csv')#
t_r=read.csv('imputed_r_30_percent_data.csv')#
t_sim=read.csv('sim_data.csv')#
par(mfrow=c(2,2))#
t_col=5#
amp_indexes=which(is.na(t_amp[,t_col]))#
hist(t_py[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Python Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column', t_col),col='blue')#
hist(t_r[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('R Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column',t_col),col='blue')#
ks.test(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
ks.test(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])#
mse(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
mse(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])
abs(t_sim[amp_indexes,t_col]-t_py[amp_indexes,t_col])/length(amp_indexes)#
abs(t_sim[amp_indexes,t_col]-t_r[amp_indexes,t_col])/length(amp_indexes)
sum(abs(t_sim[amp_indexes,t_col]-t_py[amp_indexes,t_col]))/length(amp_indexes)#
sum(abs(t_sim[amp_indexes,t_col]-t_r[amp_indexes,t_col]))/length(amp_indexes)
require(saeRobust)#
setwd('/Users/peterstafford/generalassembly/capstone_repo/capstone/capstone/capstone')#
t_amp=read.csv('amp_data.csv')#
t_py=read.csv('train_Python_.csv')#
t_r=read.csv('imputed_r_30_percent_data.csv')#
t_sim=read.csv('sim_data.csv')#
par(mfrow=c(2,2))#
t_col=2#
amp_indexes=which(is.na(t_amp[,t_col]))#
hist(t_py[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Python Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column', t_col),col='blue')#
hist(t_r[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('R Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column',t_col),col='blue')#
ks.test(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
ks.test(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])#
sum(abs(t_sim[amp_indexes,t_col]-t_py[amp_indexes,t_col]))/length(amp_indexes)#
sum(abs(t_sim[amp_indexes,t_col]-t_r[amp_indexes,t_col]))/length(amp_indexes)
t_col=3#
amp_indexes=which(is.na(t_amp[,t_col]))#
hist(t_py[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Python Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column', t_col),col='blue')#
hist(t_r[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('R Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column',t_col),col='blue')#
ks.test(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
ks.test(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])#
sum(abs(t_sim[amp_indexes,t_col]-t_py[amp_indexes,t_col]))/length(amp_indexes)#
sum(abs(t_sim[amp_indexes,t_col]-t_r[amp_indexes,t_col]))/length(amp_indexes)
t_col=4#
amp_indexes=which(is.na(t_amp[,t_col]))#
hist(t_py[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Python Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column', t_col),col='blue')#
hist(t_r[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('R Column',t_col),col='red')#
hist(t_sim[amp_indexes,t_col],ylim=c(0,1000),xlab='x',main=paste('Actual Column',t_col),col='blue')#
ks.test(t_sim[amp_indexes,t_col],t_py[amp_indexes,t_col])#
ks.test(t_sim[amp_indexes,t_col],t_r[amp_indexes,t_col])#
sum(abs(t_sim[amp_indexes,t_col]-t_py[amp_indexes,t_col]))/length(amp_indexes)#
sum(abs(t_sim[amp_indexes,t_col]-t_r[amp_indexes,t_col]))/length(amp_indexes)
